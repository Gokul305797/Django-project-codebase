# =============================================================================
# .env.example - Environment Variables Template
# Copy this file to .env and update with your actual values
# =============================================================================

# =============================================================================
# DJANGO CORE SETTINGS
# =============================================================================

# SECRET KEY - Generate a new one for production using Django's get_random_secret_key()
# You can generate one at: https://djecrety.ir/ or use Django command: 
# python -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())'
SECRET_KEY=django-insecure-your-very-long-secret-key-here-change-this-in-production-50-chars

# Debug mode - Set to False in production
DEBUG=True

# Allowed hosts - Add your domain names for production (comma-separated)
ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# PostgreSQL Database Settings
DB_ENGINE=django.db.backends.postgresql
DB_NAME=employee_db
DB_USER=postgres
DB_PASSWORD=your_secure_password_here
DB_HOST=localhost
DB_PORT=5432

# Alternative: Database URL (choose either individual settings above OR this)
# DATABASE_URL=postgresql://username:password@localhost:5432/employee_db

# SQLite for development (uncomment to use instead of PostgreSQL)
# DB_ENGINE=django.db.backends.sqlite3
# DB_NAME=db.sqlite3

# =============================================================================
# SECURITY SETTINGS
# =============================================================================

# CORS Settings - Add your frontend domains (comma-separated)
CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000,http://localhost:8080

# CSRF Settings
CSRF_TRUSTED_ORIGINS=http://localhost:8000,http://127.0.0.1:8000

# Session and CSRF Cookie Security (set to True in production with HTTPS)
SESSION_COOKIE_SECURE=False
CSRF_COOKIE_SECURE=False
SECURE_SSL_REDIRECT=False

# Production Security Settings (uncomment for production)
# SESSION_COOKIE_SECURE=True
# CSRF_COOKIE_SECURE=True
# SECURE_SSL_REDIRECT=True
# SECURE_BROWSER_XSS_FILTER=True
# SECURE_CONTENT_TYPE_NOSNIFF=True
# X_FRAME_OPTIONS=DENY
# SECURE_HSTS_SECONDS=31536000
# SECURE_HSTS_INCLUDE_SUBDOMAINS=True
# SECURE_HSTS_PRELOAD=True

# =============================================================================
# EMAIL CONFIGURATION
# =============================================================================

# Email Backend - Choose based on environment
# For development (emails printed to console)
EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend

# For production (SMTP)
# EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend

# SMTP Settings (for production email sending)
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USE_TLS=True
EMAIL_HOST_USER=your-email@gmail.com
EMAIL_HOST_PASSWORD=your-app-specific-password

# Default from email address
DEFAULT_FROM_EMAIL=Employee Management System <noreply@yourcompany.com>
SERVER_EMAIL=server@yourcompany.com

# =============================================================================
# STATIC AND MEDIA FILES
# =============================================================================

# Static files configuration
STATIC_URL=/static/
STATIC_ROOT=staticfiles

# Media files configuration
MEDIA_URL=/media/
MEDIA_ROOT=media

# =============================================================================
# REDIS CONFIGURATION (Optional - for caching and sessions)
# =============================================================================

# Redis URL for caching
REDIS_URL=redis://localhost:6379/0

# Cache timeout in seconds
CACHE_TTL=300

# Session engine (uncomment to use Redis for sessions)
# SESSION_ENGINE=django.contrib.sessions.backends.cache
# SESSION_CACHE_ALIAS=default

# =============================================================================
# API SETTINGS
# =============================================================================

# API Rate limiting (requests per time period)
API_THROTTLE_RATE_ANON=100/hour
API_THROTTLE_RATE_USER=1000/hour

# API Pagination
API_PAGE_SIZE=20
API_MAX_PAGE_SIZE=100

# Token expiration (in seconds, 0 for no expiration)
TOKEN_EXPIRE_TIME=0

# JWT Settings (if using JWT instead of Token auth)
JWT_SECRET_KEY=your-jwt-secret-key-here-different-from-django-secret
JWT_ALGORITHM=HS256
JWT_EXPIRATION_DELTA=3600

# =============================================================================
# THIRD PARTY SERVICES
# =============================================================================

# AWS S3 Settings (for file storage in production)
AWS_ACCESS_KEY_ID=your-aws-access-key-id
AWS_SECRET_ACCESS_KEY=your-aws-secret-access-key
AWS_STORAGE_BUCKET_NAME=your-s3-bucket-name
AWS_S3_REGION_NAME=us-east-1
AWS_S3_CUSTOM_DOMAIN=your-cloudfront-domain.cloudfront.net

# Use S3 for static/media files (set to True for production)
USE_S3=False

# Sentry Error Tracking (for production monitoring)
SENTRY_DSN=https://your-sentry-dsn-key@sentry.io/project-id

# Google Analytics (optional)
GOOGLE_ANALYTICS_ID=GA-XXXXXXXXX

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================

# Log Level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
LOG_LEVEL=INFO

# Enable file logging (set to False to disable file logs)
ENABLE_FILE_LOGGING=True

# Log file path
LOG_FILE_PATH=logs/django.log

# =============================================================================
# DEVELOPMENT SETTINGS
# =============================================================================

# Django Debug Toolbar (set to True to enable in development)
SHOW_TOOLBAR=True

# Django Extensions (set to True to enable development tools)
USE_DJANGO_EXTENSIONS=True

# Disable migrations during testing (speeds up tests)
TESTING=False

# =============================================================================
# API DOCUMENTATION SETTINGS
# =============================================================================

# Swagger/API Documentation Settings
API_TITLE=Employee Management System API
API_DESCRIPTION=A comprehensive REST API for managing employees, attendance, and performance reviews
API_VERSION=v1.0.0
API_TERMS_OF_SERVICE=https://yourcompany.com/terms-of-service/
API_CONTACT_EMAIL=api-support@yourcompany.com
API_CONTACT_NAME=API Support Team
API_LICENSE_NAME=MIT License
API_LICENSE_URL=https://opensource.org/licenses/MIT

# Swagger UI Settings
SWAGGER_LOGIN_URL=/admin/login/
SWAGGER_LOGOUT_URL=/admin/logout/

# =============================================================================
# DOCKER SPECIFIC SETTINGS
# =============================================================================

# When using Docker Compose, uncomment these:
# DB_HOST=db
# REDIS_URL=redis://redis:6379/0

# =============================================================================
# PERFORMANCE SETTINGS
# =============================================================================

# Database connection pooling
DB_CONN_MAX_AGE=300
DB_CONN_HEALTH_CHECKS=True

# Template caching (set to True in production)
TEMPLATE_CACHE=False

# Static files compression (set to True in production)
COMPRESS_ENABLED=False
COMPRESS_OFFLINE=False

# =============================================================================
# LOCALIZATION SETTINGS
# =============================================================================

# Language and timezone
LANGUAGE_CODE=en-us
TIME_ZONE=UTC

# Internationalization
USE_I18N=True
USE_L10N=True
USE_TZ=True

# Available languages (if supporting multiple languages)
# LANGUAGES=en-us,es,fr,de

# =============================================================================
# BACKUP SETTINGS
# =============================================================================

# Database backup settings
BACKUP_ENABLED=False
BACKUP_STORAGE_PATH=backups/
BACKUP_RETENTION_DAYS=30

# =============================================================================
# MONITORING AND ANALYTICS
# =============================================================================

# Health check settings
HEALTH_CHECK_ENABLED=True

# Performance monitoring
PERFORMANCE_MONITORING=False

# API Usage Analytics
API_ANALYTICS_ENABLED=False

# =============================================================================
# FEATURE FLAGS
# =============================================================================

# Enable/disable specific features
ENABLE_ATTENDANCE_MODULE=True
ENABLE_PERFORMANCE_MODULE=True
ENABLE_CHARTS_MODULE=True
ENABLE_API_DOCS=True

# Advanced features
ENABLE_BULK_OPERATIONS=True
ENABLE_EXPORT_FUNCTIONALITY=True
ENABLE_NOTIFICATIONS=False

# =============================================================================
# EXAMPLE PRODUCTION VALUES
# =============================================================================
# For reference - use these patterns in production:
# 
# SECRET_KEY=prod-1a2b3c4d5e6f7g8h9i0j-50-character-random-string
# DEBUG=False
# ALLOWED_HOSTS=yourdomain.com,www.yourdomain.com,api.yourdomain.com
# 
# # Production Database
# DB_HOST=your-production-db-host.amazonaws.com
# DB_NAME=employee_production_db
# DB_USER=prod_db_user
# DB_PASSWORD=very-secure-production-password-123!@#
# 
# # Production Email
# EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend
# EMAIL_HOST_PASSWORD=your-production-email-app-password
# 
# # Production Security
# CORS_ALLOWED_ORIGINS=https://yourdomain.com,https://www.yourdomain.com
# SESSION_COOKIE_SECURE=True
# CSRF_COOKIE_SECURE=True
# SECURE_SSL_REDIRECT=True
# 
# # Production Storage
# USE_S3=True
# AWS_STORAGE_BUCKET_NAME=your-production-bucket
# 
# # Production Monitoring
# SENTRY_DSN=https://your-actual-sentry-dsn@sentry.io/project
# LOG_LEVEL=WARNING
# 
# =============================================================================

# =============================================================================
# QUICK SETUP NOTES
# =============================================================================
# 
# 1. Copy this file: cp .env.example .env
# 2. Generate SECRET_KEY: python -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())"
# 3. Create PostgreSQL database: createdb employee_db
# 4. Update DB_PASSWORD with your PostgreSQL password
# 5. For Gmail SMTP, use App Password: https://support.google.com/accounts/answer/185833
# 6. Run migrations: python manage.py migrate
# 7. Create superuser: python manage.py createsuperuser
# 8. Start server: python manage.py runserver
# 
# =============================================================================
