

## 1. Main Settings (employee_project/settings.py)
import os
from pathlib import Path
import environ

# Initialize environment variables
env = environ.Env(
    DEBUG=(bool, False)
)

BASE_DIR = Path(__file__).resolve().parent.parent

# Read .env file
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

SECRET_KEY = env('SECRET_KEY', default='your-secret-key-here')
DEBUG = env('DEBUG')

ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['localhost', '127.0.0.1'])

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Third party apps
    'rest_framework',
    'rest_framework.authtoken',
    'drf_yasg',
    'django_filters',
    'corsheaders',
    
    # Local apps
    'employees.apps.EmployeesConfig',
    'attendance.apps.AttendanceConfig',
    'performance.apps.PerformanceConfig',
    'charts.apps.ChartsConfig',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'employee_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'employee_project.wsgi.application'

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': env('DB_NAME', default='employee_db'),
        'USER': env('DB_USER', default='postgres'),
        'PASSWORD': env('DB_PASSWORD', default='password'),
        'HOST': env('DB_HOST', default='localhost'),
        'PORT': env('DB_PORT', default='5432'),
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [BASE_DIR / 'static']

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
}

# Swagger settings
SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Token': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        }
    }
}

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]


## 2. Main URLs (employee_project/urls.py)
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static
from rest_framework import permissions
from drf_yasg.views import get_schema_view
from drf_yasg import openapi

schema_view = get_schema_view(
   openapi.Info(
      title="Employee Management API",
      default_version='v1',
      description="A comprehensive API for managing employees, attendance, and performance",
      terms_of_service="https://www.google.com/policies/terms/",
      contact=openapi.Contact(email="admin@employeemanagement.com"),
      license=openapi.License(name="BSD License"),
   ),
   public=True,
   permission_classes=(permissions.AllowAny,),
)

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/auth/', include('rest_framework.urls')),
    path('api/employees/', include('employees.urls')),
    path('api/attendance/', include('attendance.urls')),
    path('api/performance/', include('performance.urls')),
    path('charts/', include('charts.urls')),
    
    # Swagger URLs
    path('swagger<format>/', schema_view.without_ui(cache_timeout=0), name='schema-json'),
    path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),
    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),
]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
```

## 3. Employee Models (employees/models.py)

```python
from django.db import models
from django.core.validators import EmailValidator, RegexValidator
from django.contrib.auth.models import User

class Department(models.Model):
    name = models.CharField(max_length=100, unique=True)
    description = models.TextField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['name']

    def __str__(self):
        return self.name

    @property
    def employee_count(self):
        return self.employees.count()

class Employee(models.Model):
    GENDER_CHOICES = [
        ('M', 'Male'),
        ('F', 'Female'),
        ('O', 'Other'),
    ]

    STATUS_CHOICES = [
        ('ACTIVE', 'Active'),
        ('INACTIVE', 'Inactive'),
        ('TERMINATED', 'Terminated'),
    ]

    user = models.OneToOneField(User, on_delete=models.CASCADE, null=True, blank=True)
    employee_id = models.CharField(max_length=20, unique=True)
    name = models.CharField(max_length=100)
    email = models.EmailField(validators=[EmailValidator()])
    phone_number = models.CharField(
        max_length=15,
        validators=[RegexValidator(regex=r'^\+?1?\d{9,15}$')]
    )
    address = models.TextField()
    date_of_birth = models.DateField(null=True, blank=True)
    gender = models.CharField(max_length=1, choices=GENDER_CHOICES, null=True, blank=True)
    date_joined = models.DateField()
    department = models.ForeignKey(
        Department, 
        on_delete=models.PROTECT,
        related_name='employees'
    )
    salary = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    position = models.CharField(max_length=100, blank=True)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='ACTIVE')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['-date_joined']
        indexes = [
            models.Index(fields=['employee_id']),
            models.Index(fields=['email']),
            models.Index(fields=['department']),
        ]

    def __str__(self):
        return f"{self.name} ({self.employee_id})"

    def save(self, *args, **kwargs):
        if not self.employee_id:
            # Generate employee ID
            last_employee = Employee.objects.filter(
                employee_id__startswith='EMP'
            ).order_by('employee_id').last()
            
            if last_employee:
                last_id = int(last_employee.employee_id[3:])
                self.employee_id = f'EMP{last_id + 1:04d}'
            else:
                self.employee_id = 'EMP0001'
        
        super().save(*args, **kwargs)

    @property
    def years_of_service(self):
        from datetime import date
        return (date.today() - self.date_joined).days // 365
```

## 4. Attendance Models (attendance/models.py)

```python
from django.db import models
from employees.models import Employee

class Attendance(models.Model):
    STATUS_CHOICES = [
        ('PRESENT', 'Present'),
        ('ABSENT', 'Absent'),
        ('LATE', 'Late'),
        ('HALF_DAY', 'Half Day'),
        ('SICK_LEAVE', 'Sick Leave'),
        ('CASUAL_LEAVE', 'Casual Leave'),
    ]

    employee = models.ForeignKey(
        Employee,
        on_delete=models.CASCADE,
        related_name='attendance_records'
    )
    date = models.DateField()
    status = models.CharField(max_length=20, choices=STATUS_CHOICES)
    check_in_time = models.TimeField(null=True, blank=True)
    check_out_time = models.TimeField(null=True, blank=True)
    hours_worked = models.DecimalField(max_digits=4, decimal_places=2, null=True, blank=True)
    notes = models.TextField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        unique_together = ['employee', 'date']
        ordering = ['-date']
        indexes = [
            models.Index(fields=['employee', 'date']),
            models.Index(fields=['date']),
        ]

    def __str__(self):
        return f"{self.employee.name} - {self.date} ({self.status})"

    def save(self, *args, **kwargs):
        if self.check_in_time and self.check_out_time:
            # Calculate hours worked
            from datetime import datetime, timedelta
            check_in = datetime.combine(self.date, self.check_in_time)
            check_out = datetime.combine(self.date, self.check_out_time)
            
            if check_out < check_in:
                check_out += timedelta(days=1)
            
            duration = check_out - check_in
            self.hours_worked = duration.total_seconds() / 3600
        
        super().save(*args, **kwargs)

class LeaveRequest(models.Model):
    LEAVE_TYPES = [
        ('SICK', 'Sick Leave'),
        ('CASUAL', 'Casual Leave'),
        ('VACATION', 'Vacation'),
        ('MATERNITY', 'Maternity Leave'),
        ('PATERNITY', 'Paternity Leave'),
    ]

    STATUS_CHOICES = [
        ('PENDING', 'Pending'),
        ('APPROVED', 'Approved'),
        ('REJECTED', 'Rejected'),
    ]

    employee = models.ForeignKey(
        Employee,
        on_delete=models.CASCADE,
        related_name='leave_requests'
    )
    leave_type = models.CharField(max_length=20, choices=LEAVE_TYPES)
    start_date = models.DateField()
    end_date = models.DateField()
    reason = models.TextField()
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='PENDING')
    approved_by = models.ForeignKey(
        Employee,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='approved_leaves'
    )
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['-created_at']

    def __str__(self):
        return f"{self.employee.name} - {self.leave_type} ({self.start_date} to {self.end_date})"

    @property
    def duration_days(self):
        return (self.end_date - self.start_date).days + 1
```

## 5. Performance Models (performance/models.py)

```python
from django.db import models
from django.core.validators import MinValueValidator, MaxValueValidator
from employees.models import Employee

class Performance(models.Model):
    RATING_CHOICES = [
        (1, 'Poor'),
        (2, 'Below Average'),
        (3, 'Average'),
        (4, 'Good'),
        (5, 'Excellent'),
    ]

    REVIEW_TYPES = [
        ('QUARTERLY', 'Quarterly'),
        ('HALF_YEARLY', 'Half Yearly'),
        ('ANNUAL', 'Annual'),
    ]

    employee = models.ForeignKey(
        Employee,
        on_delete=models.CASCADE,
        related_name='performance_reviews'
    )
    review_period = models.CharField(max_length=20, choices=REVIEW_TYPES)
    review_date = models.DateField()
    rating = models.IntegerField(
        choices=RATING_CHOICES,
        validators=[MinValueValidator(1), MaxValueValidator(5)]
    )
    goals_achievement = models.TextField()
    strengths = models.TextField()
    areas_for_improvement = models.TextField()
    feedback = models.TextField(blank=True)
    reviewer = models.ForeignKey(
        Employee,
        on_delete=models.SET_NULL,
        null=True,
        related_name='conducted_reviews'
    )
    next_review_date = models.DateField(null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['-review_date']
        indexes = [
            models.Index(fields=['employee', 'review_date']),
        ]

    def __str__(self):
        return f"{self.employee.name} - {self.review_period} ({self.review_date})"

class Goal(models.Model):
    STATUS_CHOICES = [
        ('NOT_STARTED', 'Not Started'),
        ('IN_PROGRESS', 'In Progress'),
        ('COMPLETED', 'Completed'),
        ('CANCELLED', 'Cancelled'),
    ]

    employee = models.ForeignKey(
        Employee,
        on_delete=models.CASCADE,
        related_name='goals'
    )
    title = models.CharField(max_length=200)
    description = models.TextField()
    target_date = models.DateField()
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='NOT_STARTED')
    progress_percentage = models.IntegerField(
        default=0,
        validators=[MinValueValidator(0), MaxValueValidator(100)]
    )
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['-created_at']

    def __str__(self):
        return f"{self.employee.name} - {self.title}"
```

## 6. Employee Serializers (employees/serializers.py)

```python
from rest_framework import serializers
from .models import Employee, Department

class DepartmentSerializer(serializers.ModelSerializer):
    employee_count = serializers.ReadOnlyField()

    class Meta:
        model = Department
        fields = ['id', 'name', 'description', 'employee_count', 'created_at', 'updated_at']

class EmployeeSerializer(serializers.ModelSerializer):
    department_name = serializers.CharField(source='department.name', read_only=True)
    years_of_service = serializers.ReadOnlyField()

    class Meta:
        model = Employee
        fields = [
            'id', 'employee_id', 'name', 'email', 'phone_number', 
            'address', 'date_of_birth', 'gender', 'date_joined', 
            'department', 'department_name', 'salary', 'position', 
            'status', 'years_of_service', 'created_at', 'updated_at'
        ]
        read_only_fields = ['employee_id', 'created_at', 'updated_at']

class EmployeeCreateSerializer(serializers.ModelSerializer):
    class Meta:
        model = Employee
        fields = [
            'name', 'email', 'phone_number', 'address', 
            'date_of_birth', 'gender', 'date_joined', 
            'department', 'salary', 'position', 'status'
        ]

class EmployeeListSerializer(serializers.ModelSerializer):
    department_name = serializers.CharField(source='department.name', read_only=True)

    class Meta:
        model = Employee
        fields = [
            'id', 'employee_id', 'name', 'email', 
            'department_name', 'position', 'status', 'date_joined'
        ]
```

## 7. Employee Views (employees/views.py)

```python
from rest_framework import viewsets, filters, status
from rest_framework.decorators import action
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from django_filters.rest_framework import DjangoFilterBackend
from django.db.models import Count, Q
from .models import Employee, Department
from .serializers import (
    EmployeeSerializer, EmployeeCreateSerializer, 
    EmployeeListSerializer, DepartmentSerializer
)

class DepartmentViewSet(viewsets.ModelViewSet):
    queryset = Department.objects.all()
    serializer_class = DepartmentSerializer
    permission_classes = [IsAuthenticated]
    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]
    search_fields = ['name', 'description']
    ordering_fields = ['name', 'created_at']
    ordering = ['name']

    @action(detail=True, methods=['get'])
    def employees(self, request, pk=None):
        department = self.get_object()
        employees = department.employees.all()
        serializer = EmployeeListSerializer(employees, many=True)
        return Response(serializer.data)

class EmployeeViewSet(viewsets.ModelViewSet):
    queryset = Employee.objects.select_related('department').all()
    permission_classes = [IsAuthenticated]
    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]
    filterset_fields = ['department', 'status', 'gender']
    search_fields = ['name', 'email', 'employee_id', 'position']
    ordering_fields = ['name', 'date_joined', 'salary']
    ordering = ['-date_joined']

    def get_serializer_class(self):
        if self.action == 'create':
            return EmployeeCreateSerializer
        elif self.action == 'list':
            return EmployeeListSerializer
        return EmployeeSerializer

    def get_queryset(self):
        queryset = super().get_queryset()
        
        # Filter by date range
        date_from = self.request.query_params.get('date_from')
        date_to = self.request.query_params.get('date_to')
        
        if date_from:
            queryset = queryset.filter(date_joined__gte=date_from)
        if date_to:
            queryset = queryset.filter(date_joined__lte=date_to)
            
        return queryset

    @action(detail=False, methods=['get'])
    def statistics(self, request):
        total_employees = Employee.objects.count()
        active_employees = Employee.objects.filter(status='ACTIVE').count()
        
        department_stats = Department.objects.annotate(
            employee_count=Count('employees')
        ).values('name', 'employee_count')
        
        gender_stats = Employee.objects.values('gender').annotate(
            count=Count('id')
        ).order_by('gender')
        
        return Response({
            'total_employees': total_employees,
            'active_employees': active_employees,
            'inactive_employees': total_employees - active_employees,
            'departments': list(department_stats),
            'gender_distribution': list(gender_stats)
        })

    @action(detail=True, methods=['post'])
    def deactivate(self, request, pk=None):
        employee = self.get_object()
        employee.status = 'INACTIVE'
        employee.save()
        return Response({'message': 'Employee deactivated successfully'})

    @action(detail=True, methods=['post'])
    def activate(self, request, pk=None):
        employee = self.get_object()
        employee.status = 'ACTIVE'
        employee.save()
        return Response({'message': 'Employee activated successfully'})
```

## 8. Attendance Serializers (attendance/serializers.py)

```python
from rest_framework import serializers
from .models import Attendance, LeaveRequest
from employees.models import Employee

class AttendanceSerializer(serializers.ModelSerializer):
    employee_name = serializers.CharField(source='employee.name', read_only=True)
    employee_id = serializers.CharField(source='employee.employee_id', read_only=True)

    class Meta:
        model = Attendance
        fields = [
            'id', 'employee', 'employee_name', 'employee_id', 'date',
            'status', 'check_in_time', 'check_out_time', 'hours_worked',
            'notes', 'created_at', 'updated_at'
        ]
        read_only_fields = ['hours_worked', 'created_at', 'updated_at']

class AttendanceCreateSerializer(serializers.ModelSerializer):
    class Meta:
        model = Attendance
        fields = [
            'employee', 'date', 'status', 'check_in_time', 
            'check_out_time', 'notes'
        ]

class LeaveRequestSerializer(serializers.ModelSerializer):
    employee_name = serializers.CharField(source='employee.name', read_only=True)
    approved_by_name = serializers.CharField(source='approved_by.name', read_only=True)
    duration_days = serializers.ReadOnlyField()

    class Meta:
        model = LeaveRequest
        fields = [
            'id', 'employee', 'employee_name', 'leave_type', 'start_date',
            'end_date', 'reason', 'status', 'approved_by', 'approved_by_name',
            'duration_days', 'created_at', 'updated_at'
        ]
        read_only_fields = ['approved_by', 'created_at', 'updated_at']
```

## 9. Management Command for Seeding Data (employees/management/commands/seed_data.py)

```python
from django.core.management.base import BaseCommand
from django.contrib.auth.models import User
from faker import Faker
import random
from datetime import date, timedelta
from employees.models import Employee, Department
from attendance.models import Attendance, LeaveRequest
from performance.models import Performance, Goal

class Command(BaseCommand):
    help = 'Seed database with fake employee data'

    def add_arguments(self, parser):
        parser.add_argument('--employees', type=int, default=50, help='Number of employees to create')

    def handle(self, *args, **options):
        fake = Faker()
        
        # Create departments
        departments = [
            'Human Resources', 'Engineering', 'Marketing', 'Sales', 
            'Finance', 'Operations', 'Customer Support', 'Legal',
            'IT', 'Research & Development'
        ]
        
        dept_objects = []
        for dept_name in departments:
            dept, created = Department.objects.get_or_create(
                name=dept_name,
                defaults={'description': fake.text(max_nb_chars=200)}
            )
            dept_objects.append(dept)
            if created:
                self.stdout.write(f'Created department: {dept_name}')

        # Create employees
        employee_count = options['employees']
        
        for i in range(employee_count):
            # Create user
            username = fake.user_name()
            while User.objects.filter(username=username).exists():
                username = fake.user_name()
            
            user = User.objects.create_user(
                username=username,
                email=fake.email(),
                first_name=fake.first_name(),
                last_name=fake.last_name(),
                password='password123'
            )

            # Create employee
            employee = Employee.objects.create(
                user=user,
                name=f"{user.first_name} {user.last_name}",
                email=user.email,
                phone_number=fake.phone_number()[:15],
                address=fake.address(),
                date_of_birth=fake.date_of_birth(minimum_age=22, maximum_age=65),
                gender=random.choice(['M', 'F']),
                date_joined=fake.date_between(start_date='-5y', end_date='today'),
                department=random.choice(dept_objects),
                salary=random.randint(30000, 150000),
                position=fake.job(),
                status=random.choices(['ACTIVE', 'INACTIVE'], weights=[0.9, 0.1])[0]
            )

            # Create attendance records
            start_date = max(employee.date_joined, date.today() - timedelta(days=90))
            current_date = start_date
            
            while current_date <= date.today():
                if current_date.weekday() < 5:  # Weekdays only
                    status = random.choices(
                        ['PRESENT', 'ABSENT', 'LATE', 'SICK_LEAVE'],
                        weights=[0.8, 0.05, 0.1, 0.05]
                    )[0]
                    
                    check_in = None
                    check_out = None
                    
                    if status in ['PRESENT', 'LATE']:
                        check_in = fake.time_object()
                        check_out = fake.time_object()
                    
                    Attendance.objects.create(
                        employee=employee,
                        date=current_date,
                        status=status,
                        check_in_time=check_in,
                        check_out_time=check_out,
                        notes=fake.text(max_nb_chars=100) if random.choice([True, False]) else ''
                    )
                
                current_date += timedelta(days=1)

            # Create leave requests
            for _ in range(random.randint(0, 3)):
                start_date = fake.date_between(start_date='-6m', end_date='+3m')
                end_date = start_date + timedelta(days=random.randint(1, 10))
                
                LeaveRequest.objects.create(
                    employee=employee,
                    leave_type=random.choice(['SICK', 'CASUAL', 'VACATION']),
                    start_date=start_date,
                    end_date=end_date,
                    reason=fake.text(max_nb_chars=200),
                    status=random.choice(['PENDING', 'APPROVED', 'REJECTED'])
                )

            # Create performance reviews
            for _ in range(random.randint(1, 3)):
                Performance.objects.create(
                    employee=employee,
                    review_period=random.choice(['QUARTERLY', 'HALF_YEARLY', 'ANNUAL']),
                    review_date=fake.date_between(start_date='-1y', end_date='today'),
                    rating=random.randint(1, 5),
                    goals_achievement=fake.text(max_nb_chars=300),
                    strengths=fake.text(max_nb_chars=200),
                    areas_for_improvement=fake.text(max_nb_chars=200),
                    feedback=fake.text(max_nb_chars=250)
                )

            # Create goals
            for _ in range(random.randint(1, 4)):
                Goal.objects.create(
                    employee=employee,
                    title=fake.sentence(nb_words=6),
                    description=fake.text(max_nb_chars=300),
                    target_date=fake.date_between(start_date='today', end_date='+1y'),
                    status=random.choice(['NOT_STARTED', 'IN_PROGRESS', 'COMPLETED']),
                    progress_percentage=random.randint(0, 100)
                )

            self.stdout.write(f'Created employee: {employee.name}')

        self.stdout.write(
            self.style.SUCCESS(
                f'Successfully created {employee_count} employees with related data'
            )
        )


## 10. Attendance Views (attendance/views.py)

```python
from rest_framework import viewsets, filters, status
from rest_framework.decorators import action
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from django_filters.rest_framework import DjangoFilterBackend
from django.db.models import Count, Q
from django.utils import timezone
from datetime import date, timedelta
from .models import Attendance, LeaveRequest
from .serializers import AttendanceSerializer, AttendanceCreateSerializer, LeaveRequestSerializer

class AttendanceViewSet(viewsets.ModelViewSet):
    queryset = Attendance.objects.select_related('employee').all()
    permission_classes = [IsAuthenticated]
    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]
    filterset_fields = ['employee', 'status', 'date']
    search_fields = ['employee__name', 'employee__employee_id']
    ordering_fields = ['date', 'employee__name']
    ordering = ['-date']

    def get_serializer_class(self):
        if self.action == 'create':
            return AttendanceCreateSerializer
        return AttendanceSerializer

    def get_queryset(self):
        queryset = super().get_queryset()
        
        # Filter by date range
        date_from = self.request.query_params.get('date_from')
        date_to = self.request.query_params.get('date_to')
        
        if date_from:
            queryset = queryset.filter(date__gte=date_from)
        if date_to:
            queryset = queryset.filter(date__lte=date_to)
        
        # Filter by employee
        employee_id = self.request.query_params.get('employee_id')
        if employee_id:
            queryset = queryset.filter(employee__employee_id=employee_id)
            
        return queryset

    @action(detail=False, methods=['get'])
    def today_attendance(self, request):
        today = date.today()
        attendance = Attendance.objects.filter(date=today).select_related('employee')
        serializer = self.get_serializer(attendance, many=True)
        return Response(serializer.data)

    @action(detail=False, methods=['get'])
    def monthly_report(self, request):
        month = request.query_params.get('month', date.today().month)
        year = request.query_params.get('year', date.today().year)
        
        attendance_data = Attendance.objects.filter(
            date__month=month,
            date__year=year
        ).values('status').annotate(count=Count('id'))
        
        return Response({
            'month': month,
            'year': year,
            'attendance_summary': list(attendance_data)
        })

    @action(detail=False, methods=['post'])
    def bulk_create(self, request):
        serializer = AttendanceCreateSerializer(data=request.data, many=True)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

class LeaveRequestViewSet(viewsets.ModelViewSet):
    queryset = LeaveRequest.objects.select_related('employee', 'approved_by').all()
    serializer_class = LeaveRequestSerializer
    permission_classes = [IsAuthenticated]
    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]
    filterset_fields = ['employee', 'leave_type', 'status']
    search_fields = ['employee__name', 'reason']
    ordering_fields = ['start_date', 'created_at']
    ordering = ['-created_at']

    @action(detail=True, methods=['post'])
    def approve(self, request, pk=None):
        leave_request = self.get_object()
        leave_request.status = 'APPROVED'
        # In a real app, you'd get the approver from request.user
        leave_request.save()
        return Response({'message': 'Leave request approved'})

    @action(detail=True, methods=['post'])
    def reject(self, request, pk=None):
        leave_request = self.get_object()
        leave_request.status = 'REJECTED'
        leave_request.save()
        return Response({'message': 'Leave request rejected'})

    @action(detail=False, methods=['get'])
    def pending_requests(self, request):
        pending = self.queryset.filter(status='PENDING')
        serializer = self.get_serializer(pending, many=True)
        return Response(serializer.data)


## 11. Performance Views (performance/views.py)

```python
from rest_framework import viewsets, filters
from rest_framework.decorators import action
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from django_filters.rest_framework import DjangoFilterBackend
from django.db.models import Avg, Count
from .models import Performance, Goal
from .serializers import PerformanceSerializer, GoalSerializer

class PerformanceViewSet(viewsets.ModelViewSet):
    queryset = Performance.objects.select_related('employee', 'reviewer').all()
    serializer_class = PerformanceSerializer
    permission_classes = [IsAuthenticated]
    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]
    filterset_fields = ['employee', 'review_period', 'rating']
    search_fields = ['employee__name', 'goals_achievement', 'feedback']
    ordering_fields = ['review_date', 'rating']
    ordering = ['-review_date']

    @action(detail=False, methods=['get'])
    def statistics(self, request):
        avg_rating = Performance.objects.aggregate(avg_rating=Avg('rating'))
        rating_distribution = Performance.objects.values('rating').annotate(
            count=Count('id')
        ).order_by('rating')
        
        top_performers = Performance.objects.filter(
            rating__gte=4
        ).select_related('employee').values(
            'employee__name', 'employee__employee_id', 'rating'
        ).order_by('-rating')[:10]
        
        return Response({
            'average_rating': avg_rating['avg_rating'],
            'rating_distribution': list(rating_distribution),
            'top_performers': list(top_performers)
        })

    @action(detail=False, methods=['get'])
    def employee_performance(self, request):
        employee_id = request.query_params.get('employee_id')
        if not employee_id:
            return Response({'error': 'employee_id parameter is required'}, status=400)
        
        performances = self.queryset.filter(employee__employee_id=employee_id)
        serializer = self.get_serializer(performances, many=True)
        return Response(serializer.data)

class GoalViewSet(viewsets.ModelViewSet):
    queryset = Goal.objects.select_related('employee').all()
    serializer_class = GoalSerializer
    permission_classes = [IsAuthenticated]
    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]
    filterset_fields = ['employee', 'status']
    search_fields = ['title', 'description', 'employee__name']
    ordering_fields = ['target_date', 'created_at', 'progress_percentage']
    ordering = ['-created_at']

    @action(detail=True, methods=['patch'])
    def update_progress(self, request, pk=None):
        goal = self.get_object()
        progress = request.data.get('progress_percentage')
        
        if progress is not None:
            goal.progress_percentage = progress
            if progress == 100:
                goal.status = 'COMPLETED'
            elif progress > 0:
                goal.status = 'IN_PROGRESS'
            goal.save()
            
        serializer = self.get_serializer(goal)
        return Response(serializer.data)


## 12. Performance Serializers (performance/serializers.py)

```python
from rest_framework import serializers
from .models import Performance, Goal

class PerformanceSerializer(serializers.ModelSerializer):
    employee_name = serializers.CharField(source='employee.name', read_only=True)
    employee_id = serializers.CharField(source='employee.employee_id', read_only=True)
    reviewer_name = serializers.CharField(source='reviewer.name', read_only=True)

    class Meta:
        model = Performance
        fields = [
            'id', 'employee', 'employee_name', 'employee_id', 'review_period',
            'review_date', 'rating', 'goals_achievement', 'strengths',
            'areas_for_improvement', 'feedback', 'reviewer', 'reviewer_name',
            'next_review_date', 'created_at', 'updated_at'
        ]

class GoalSerializer(serializers.ModelSerializer):
    employee_name = serializers.CharField(source='employee.name', read_only=True)
    employee_id = serializers.CharField(source='employee.employee_id', read_only=True)

    class Meta:
        model = Goal
        fields = [
            'id', 'employee', 'employee_name', 'employee_id', 'title',
            'description', 'target_date', 'status', 'progress_percentage',
            'created_at', 'updated_at'
        ]


## 13. Charts Views (charts/views.py)

```python
from django.shortcuts import render
from django.http import JsonResponse
from django.db.models import Count
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import IsAuthenticated
from employees.models import Employee, Department
from attendance.models import Attendance
from performance.models import Performance
from datetime import date, timedelta
import calendar

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def dashboard_data(request):
    # Employee statistics
    total_employees = Employee.objects.count()
    active_employees = Employee.objects.filter(status='ACTIVE').count()
    
    # Department-wise employee count
    dept_data = Department.objects.annotate(
        employee_count=Count('employees')
    ).values('name', 'employee_count')
    
    # Monthly attendance for current year
    current_year = date.today().year
    monthly_attendance = []
    
    for month in range(1, 13):
        present_count = Attendance.objects.filter(
            date__year=current_year,
            date__month=month,
            status='PRESENT'
        ).count()
        
        monthly_attendance.append({
            'month': calendar.month_abbr[month],
            'present': present_count
        })
    
    # Performance rating distribution
    rating_dist = Performance.objects.values('rating').annotate(
        count=Count('id')
    ).order_by('rating')
    
    # Recent joiners (last 30 days)
    recent_joiners = Employee.objects.filter(
        date_joined__gte=date.today() - timedelta(days=30)
    ).count()
    
    return JsonResponse({
        'total_employees': total_employees,
        'active_employees': active_employees,
        'recent_joiners': recent_joiners,
        'departments': list(dept_data),
        'monthly_attendance': monthly_attendance,
        'performance_ratings': list(rating_dist)
    })

def dashboard_view(request):
    return render(request, 'charts/dashboard.html')


## 14. Charts Templates (charts/templates/charts/dashboard.html)

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Employee Management Dashboard</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f5f5f5;
            padding: 20px;
        }
        
        .dashboard {
            max-width: 1200px;
            margin: 0 auto;
        }
        
        h1 {
            text-align: center;
            color: #333;
            margin-bottom: 30px;
            font-size: 2.5em;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .stat-card {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            text-align: center;
        }
        
        .stat-number {
            font-size: 2.5em;
            font-weight: bold;
            color: #3498db;
            margin-bottom: 5px;
        }
        
        .stat-label {
            color: #666;
            font-size: 1.1em;
        }
        
        .charts-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 20px;
        }
        
        .chart-container {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .chart-title {
            text-align: center;
            margin-bottom: 20px;
            color: #333;
            font-size: 1.3em;
        }
        
        canvas {
            max-height: 300px;
        }
        
        .loading {
            text-align: center;
            padding: 50px;
            color: #666;
        }
        
        @media (max-width: 768px) {
            .charts-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="dashboard">
        <h1>📊 Employee Management Dashboard</h1>
        
        <div id="loading" class="loading">
            Loading dashboard data...
        </div>
        
        <div id="dashboard-content" style="display: none;">
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number" id="total-employees">0</div>
                    <div class="stat-label">Total Employees</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="active-employees">0</div>
                    <div class="stat-label">Active Employees</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="recent-joiners">0</div>
                    <div class="stat-label">Recent Joiners</div>
                </div>
            </div>
            
            <div class="charts-grid">
                <div class="chart-container">
                    <h3 class="chart-title">Employees per Department</h3>
                    <canvas id="departmentChart"></canvas>
                </div>
                
                <div class="chart-container">
                    <h3 class="chart-title">Monthly Attendance Overview</h3>
                    <canvas id="attendanceChart"></canvas>
                </div>
                
                <div class="chart-container">
                    <h3 class="chart-title">Performance Rating Distribution</h3>
                    <canvas id="performanceChart"></canvas>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Function to get CSRF token
        function getCSRFToken() {
            return document.querySelector('[name=csrfmiddlewaretoken]')?.value || '';
        }

        // Fetch dashboard data
        async function loadDashboardData() {
            try {
                const response = await fetch('/charts/api/dashboard-data/', {
                    headers: {
                        'Authorization': 'Token ' + (localStorage.getItem('token') || ''),
                        'Content-Type': 'application/json',
                    }
                });
                
                if (!response.ok) {
                    throw new Error('Failed to fetch data');
                }
                
                const data = await response.json();
                renderDashboard(data);
            } catch (error) {
                console.error('Error loading dashboard data:', error);
                document.getElementById('loading').innerHTML = 
                    '❌ Error loading dashboard data. Please check if you are authenticated.';
            }
        }

        function renderDashboard(data) {
            // Hide loading and show content
            document.getElementById('loading').style.display = 'none';
            document.getElementById('dashboard-content').style.display = 'block';
            
            // Update statistics
            document.getElementById('total-employees').textContent = data.total_employees;
            document.getElementById('active-employees').textContent = data.active_employees;
            document.getElementById('recent-joiners').textContent = data.recent_joiners;
            
            // Department Chart (Pie Chart)
            const deptCtx = document.getElementById('departmentChart').getContext('2d');
            new Chart(deptCtx, {
                type: 'pie',
                data: {
                    labels: data.departments.map(d => d.name),
                    datasets: [{
                        data: data.departments.map(d => d.employee_count),
                        backgroundColor: [
                            '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0',
                            '#9966FF', '#FF9F40', '#FF6384', '#C9CBCF',
                            '#4BC0C0', '#FF6384'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });
            
            // Attendance Chart (Bar Chart)
            const attCtx = document.getElementById('attendanceChart').getContext('2d');
            new Chart(attCtx, {
                type: 'bar',
                data: {
                    labels: data.monthly_attendance.map(m => m.month),
                    datasets: [{
                        label: 'Present Days',
                        data: data.monthly_attendance.map(m => m.present),
                        backgroundColor: '#36A2EB',
                        borderColor: '#36A2EB',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
            
            // Performance Chart (Doughnut Chart)
            const perfCtx = document.getElementById('performanceChart').getContext('2d');
            const ratingLabels = ['Poor', 'Below Average', 'Average', 'Good', 'Excellent'];
            new Chart(perfCtx, {
                type: 'doughnut',
                data: {
                    labels: data.performance_ratings.map(r => ratingLabels[r.rating - 1] || 'Unknown'),
                    datasets: [{
                        data: data.performance_ratings.map(r => r.count),
                        backgroundColor: [
                            '#FF6384', '#FF9F40', '#FFCE56', '#36A2EB', '#4BC0C0'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });
        }

        // Load dashboard on page load
        document.addEventListener('DOMContentLoaded', loadDashboardData);
    </script>
</body>
</html>
